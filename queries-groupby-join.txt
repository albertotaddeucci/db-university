GROUP-BY

1. Contare quanti iscritti ci sono stati ogni anno

SELECT COUNT(`id`) AS "numero", YEAR(`enrolment_date`) AS "anno"
FROM `students`
GROUP BY YEAR(`enrolment_date`);

2. Contare gli insegnanti che hanno l'ufficio nello stesso edificio

SELECT COUNT(`id`) AS "numero", `office_address` AS "indirizzo"
FROM `teachers`
GROUP BY `office_address`;

3. Calcolare la media dei voti di ogni appello d'esame

SELECT AVG(`vote`) as "media voto",`exam_id` AS "appello esame"
FROM `exam_student`
GROUP BY `exam_id`;

4. Contare quanti corsi di laurea ci sono per ogni dipartimento

SELECT COUNT(degrees.id) AS "numero", departments.name AS "nome dipartimento"
FROM `degrees`
INNER JOIN departments
ON degrees.department_id = departments.id
GROUP BY degrees.department_id;


JOIN

1. Selezionare tutti gli studenti iscritti al Corso di Laurea in Economia

SELECT students.name, students.surname , degrees.name AS "corso di laurea"
FROM `students`
INNER JOIN degrees
ON students.degree_id = degrees.id
WHERE degrees.id = '53';


2. Selezionare tutti i Corsi di Laurea Magistrale del Dipartimento di Neuroscienze

SELECT degrees.name AS "nome corso", departments.name AS "dipartimento"
FROM `degrees`
INNER JOIN departments
ON degrees.department_id = departments.id
WHERE degrees.level = "magistrale"
AND departments.id = 7;

3. Selezionare tutti i corsi in cui insegna Fulvio Amato (id=44)

SELECT courses.name AS "nome corso", teachers.name AS "nome insegnante", teachers.surname AS "cognome insegnante"
FROM `courses`
INNER JOIN course_teacher
ON courses.id = course_teacher.course_id
INNER JOIN teachers
ON teachers.id = course_teacher.teacher_id
WHERE teachers.id = 44;

4. Selezionare tutti gli studenti con i dati relativi al corso di laurea a cui
sono iscritti e il relativo dipartimento, in ordine alfabetico per cognome e
nome

SELECT students.surname, students.name,  degrees.name AS "iscrizione", departments.name AS "dipartimento"
FROM `students`
INNER JOIN degrees
ON students.degree_id = degrees.id
INNER JOIN departments
ON degrees.department_id = departments.id
ORDER BY students.surname, students.name ASC;

5. Selezionare tutti i corsi di laurea con i relativi corsi e insegnanti

SELECT courses.name AS "nome corso", teachers.name ,teachers.surname ,degrees.name AS "nome corso di laurea"
FROM `courses`
INNER JOIN degrees
ON courses.degree_id = degrees.id
INNER JOIN course_teacher
ON courses.id=course_teacher.course_id
INNER JOIN teachers
ON teachers.id = course_teacher.teacher_id;

6. Selezionare tutti i docenti che insegnano nel Dipartimento di
Matematica (54)

SELECT DISTINCT teachers.surname ,teachers.name, departments.name
FROM `teachers`
INNER JOIN course_teacher
ON teachers.id = course_teacher.teacher_id
INNER JOIN courses
ON courses.id = course_teacher.course_id
INNER JOIN degrees
ON courses.degree_id = degrees.id
INNER JOIN departments
on degrees.department_id = departments.id
WHERE departments.id = 5  
ORDER BY `teachers`.`surname` ASC;


7. BONUS: Selezionare per ogni studente il numero di tentativi sostenuti
per ogni esame, stampando anche il voto massimo. Successivamente,
filtrare i tentativi con voto minimo 18.

SELECT students.name, students.surname , courses.name ,  COUNT(exams.id), MAX(exam_student.vote)
FROM `students` 
INNER JOIN exam_student
ON students.id = exam_student.student_id
INNER JOIN exams
ON exams.id = exam_student.exam_id
INNER JOIN courses
ON courses.id = exams.course_id  

GROUP BY student_id;

-> & con filtro  voto minimo 18

SELECT students.name, students.surname , courses.name ,  COUNT(exams.id), MAX(exam_student.vote)
FROM `students` 
INNER JOIN exam_student
ON students.id = exam_student.student_id
INNER JOIN exams
ON exams.id = exam_student.exam_id
INNER JOIN courses
ON courses.id = exams.course_id  

WHERE exam_student.vote > 18

GROUP BY exam_student.student_id;